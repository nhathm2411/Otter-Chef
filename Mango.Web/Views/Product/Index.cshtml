@model IEnumerable<ProductDto>

<style>
    .card-img-top:hover {
        transform: scale(1.05);
    }

    .card:hover {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        transform: translateY(-5px);
        transition: all 0.3s ease-in-out;
    }

    .btn:hover {
        background-color: #d0a772;
        transition: background-color 0.3s ease-in-out;
    }

    .menu-scroll-container {
        display: flex;
        align-items: center;
        overflow: hidden;
        white-space: nowrap;
        width: 100%;
        position: relative;
    }

    .menu-items {
        display: inline-flex;
        transition: transform 0.5s linear;
    }

    .menu-item {
        flex: 0 0 auto;
        width: 180px;
        text-align: center;
        background-color: white;
        border-radius: 15px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        padding: 10px;
        margin-right: 135px;
        transition: transform 0.3s ease-in-out;
    }

    menu-item:last-child {
        margin-right: 0px;
    }

    .menu-item img {
        width: 100%;
        height: 120px;
        object-fit: contain;
        border-bottom: 1px solid #eaeaea;
        margin-bottom: 10px;
    }

    .menu-item:hover {
        transform: scale(1.1);
    }

    .menu-item p {
        font-size: 16px;
        color: #333;
        font-weight: 600;
        margin-top: 10px;
    }

    .product-card:hover {
        transform: scale(1.05);
        z-index: 10;
    }
</style>
<div class="menu-scroll-container" style="justify-content: center; position: relative;">
    <div class="menu-items mx-5 py-3" id="menuItems" style="display: flex; flex-wrap: nowrap; overflow: hidden; scroll-behavior: smooth;">
        @for (var i = 0; i < ViewBag.Categories.Count; i++)
        {
            var category = ViewBag.Categories[i];
            var isLastItem = i == ViewBag.Categories.Count - 1;
            <div class="menu-item" style="text-align: center; @(isLastItem ? "margin-right: 0;" : "")">
                <img src="@category.ImageUrl" alt="@category.CategoryName" style="max-width: 100%;" />
                <p>@category.CategoryName</p>
            </div>
        }
    </div>
    <div class="slides-navigation">
        <a href="#" class="prev" onclick="scrollLeftCategory()" style="width:45px"><i class="fa fa-angle-left" aria-hidden="true"></i></a>
        <a href="#" class="next" onclick="scrollRightCategory()" style="width:45px"><i class="fa fa-angle-right" aria-hidden="true"></i></a>
    </div>
</div>


<div class="container-fluid pt-5">
    <div class="row px-xl-5">
        <div class="col-lg-3 col-md-12">
            <div class="border-bottom mb-4 pb-4">
                <h5 class="font-weight-semi-bold mb-4" style="font-size: 20px">Filter by price</h5>
                @* Initialize counters for each price range *@
                @{
                    int allCount = 0;
                    int price1Count = 0; // For $3 - $5
                    int price2Count = 0; // For $6 - $10
                    int price3Count = 0; // For $11 - $20
                    int price4Count = 0; // For $21+

                    // Loop through products and count
                    foreach (var product in Model)
                    {
                        // Count products in $3 - $5 range
                        if (product.Price >= 3 && product.Price <= 5)
                        {
                            price1Count++;
                        }
                        // Count products in $6 - $10 range
                        else if (product.Price >= 6 && product.Price <= 10)
                        {
                            price2Count++;
                        }
                        // Count products in $11 - $20 range
                        else if (product.Price >= 11 && product.Price <= 20)
                        {
                            price3Count++;
                        }
                        // Count products $21 and above
                        else if (product.Price >= 21)
                        {
                            price4Count++;
                        }

                        // Count all products
                        allCount++;
                    }
                }
                <form id="filterForm">
                    <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                        <input type="checkbox" class="custom-control-input" id="price-all" data-price-min="0" data-price-max="1000">
                        <label class="custom-control-label" for="price-all">All Price</label>
                        <span class="badge border font-weight-normal">@allCount</span>
                    </div>
                    <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                        <input type="checkbox" class="custom-control-input price-checkbox" id="price-1" data-price-min="3" data-price-max="5">
                        <label class="custom-control-label" for="price-1">$3 - $5</label>
                        <span class="badge border font-weight-normal">@price1Count</span>
                    </div>
                    <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                        <input type="checkbox" class="custom-control-input price-checkbox" id="price-2" data-price-min="6" data-price-max="10">
                        <label class="custom-control-label" for="price-2">$6 - $10</label>
                        <span class="badge border font-weight-normal">@price2Count</span>
                    </div>
                    <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                        <input type="checkbox" class="custom-control-input price-checkbox" id="price-3" data-price-min="11" data-price-max="20">
                        <label class="custom-control-label" for="price-3">$11 - $20</label>
                        <span class="badge border font-weight-normal">@price3Count</span>
                    </div>
                    <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                        <input type="checkbox" class="custom-control-input price-checkbox" id="price-4" data-price-min="21" data-price-max="1000">
                        <label class="custom-control-label" for="price-4">$21+</label>
                        <span class="badge border font-weight-normal">@price4Count</span>
                    </div>
                </form>
            </div>
        </div>




        <div class="col-lg-9 col-md-12">
            <form>
                <div class="row" id="productContainer">
                    @if (!Model.Any())
                    {
                        <div class="col-12 text-center">
                            <p>There are no products.</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var product in Model)
                        {
                            <div class="col-lg-4 col-md-6 col-sm-12 pb-1 product-card" data-product-id="@product.ProductId">
                                <div class="p-0 my-3 border rounded shadow-sm" style="overflow: hidden; border-radius: 10px; position: relative; transition: transform 0.3s ease-in-out;">
                                    <div class="card h-100">
                                        <div class="position-relative">
                                            <img src="@product.ImageUrl" class="card-img-top" alt="Product Image" style="object-fit: cover; height: 150px;" />
                                            <span class="badge position-absolute" style="top: 10px; right: 10px; background-color: #d0a772; padding: 8px 12px; font-size: 14px; color: white;">@product.Category.CategoryName</span>
                                        </div>

                                        <h3 class="text-white text-center py-1" style="background: linear-gradient(90deg, #a3745e, #d0a772); margin: 0; font-size: 20px;">@product.Name</h3>

                                        <div class="card-body d-flex flex-column" style="padding: 15px;">
                                            <div class="d-flex justify-content-between py-2 align-items-center">
                                                <span class="font-weight-bold" style="font-size: 20px; color: green;">@string.Format("{0:c}", product.Price)</span>
                                            </div>

                                            <div class="mt-auto">
                                                <a asp-controller="Home" asp-action="ProductDetails" asp-route-productId="@product.ProductId" class="btn form-control" style="background-color: #a3745e; color: white; padding: 10px 0; font-size: 14px;">Details</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </form>

            <!-- Pagination Controls -->
            <div class="pagination-controls text-right mb-4">
                <button id="prevPage" class="btn" disabled>Previous</button>
                <span id="pageInfo"></span>
                <button id="nextPage" class="btn">Next</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 text-center" id="noProductsMessage" style="display: none;">
            <p>No products match the selected filters.</p>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const productsPerPage = 6; // Số sản phẩm hiển thị mỗi trang
        let currentPage = 1;
        var productCards = document.querySelectorAll('.product-card');
        const totalProducts = productCards.length;
        const pageInfo = document.getElementById('pageInfo');
        const prevPageBtn = document.getElementById('prevPage');
        const nextPageBtn = document.getElementById('nextPage');
        const filterForm = document.getElementById('filterForm');
        let selectedCategory = null;

        // Filter sản phẩm theo danh mục
        function filterProducts() {
            const checkedFilters = filterForm.querySelectorAll('input:checked');
            productCards = document.querySelectorAll('.product-card');
            let filteredProducts = [...productCards]; // Tất cả sản phẩm

            // Lọc theo danh mục
            if (selectedCategory) {
                filteredProducts = filteredProducts.filter(card => {
                    const productCategory = card.querySelector('.badge').textContent.trim();
                    return productCategory === selectedCategory;
                });
            }

            // Lọc theo giá
            if (checkedFilters.length > 0) {
                filteredProducts = filteredProducts.filter(card => {
                    const productPrice = parseFloat(card.querySelector('.font-weight-bold').textContent.replace(/[^0-9.-]+/g, ""));
                    let isValid = false;

                    checkedFilters.forEach(filter => {
                        const minPrice = parseFloat(filter.dataset.priceMin);
                        const maxPrice = parseFloat(filter.dataset.priceMax);

                        if (productPrice >= minPrice && productPrice <= maxPrice) {
                            isValid = true;
                        }
                    });

                    return isValid;
                });
            }

            return filteredProducts;
        }

        // Cập nhật phân trang
        function updatePagination(filteredProducts) {
            productCards = document.querySelectorAll('.product-card');
            const totalFilteredProducts = filteredProducts.length;
            const totalPages = Math.ceil(totalFilteredProducts / productsPerPage);

            // Add: Get the "no products" message container
            const noProductsMessage = document.getElementById('noProductsMessage');
            productCards.forEach(card => {
                card.style.display = 'none';
            });
            if (totalFilteredProducts === 0 && productCards.length!==0) {
                noProductsMessage.style.display = 'block';  // Show the message
                pageInfo.style.display = 'none';  // Hide page info
                prevPageBtn.style.display = 'none';  // Hide pagination buttons
                nextPageBtn.style.display = 'none';
            } else {
                noProductsMessage.style.display = 'none';  // Hide the message
                pageInfo.style.display = 'inline-block';  // Show page info
                prevPageBtn.style.display = 'inline-block';  // Show pagination buttons
                nextPageBtn.style.display = 'inline-block';
                // Ẩn tất cả sản phẩm


                // Hiển thị các sản phẩm đã lọc
                const start = (currentPage - 1) * productsPerPage;
                const end = start + productsPerPage;
                for (let i = start; i < end && i < totalFilteredProducts; i++) {
                    filteredProducts[i].style.display = 'block';
                }

                // Cập nhật thông tin trang và nút điều hướng
                pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
                prevPageBtn.disabled = currentPage === 1;
                nextPageBtn.disabled = currentPage === totalPages;
            }
        }

        // Áp dụng bộ lọc
        function applyFilters() {
            currentPage = 1;
            const filteredProducts = filterProducts();
            updatePagination(filteredProducts);
        }

        prevPageBtn.addEventListener('click', function () {
            if (currentPage > 1) {
                currentPage--;
                const filteredProducts = filterProducts();
                updatePagination(filteredProducts);
            }
        });

        nextPageBtn.addEventListener('click', function () {
            const filteredProducts = filterProducts();
            if (currentPage < Math.ceil(filteredProducts.length / productsPerPage)) {
                currentPage++;
                updatePagination(filteredProducts);
            }
        });

        // Áp dụng bộ lọc khi thay đổi giá
        filterForm.addEventListener('change', applyFilters);

        // Lọc sản phẩm khi click vào menu-item
        const menuItems = document.querySelectorAll('.menu-item');
        menuItems.forEach(item => {
            item.addEventListener('click', function () {
                selectedCategory = this.querySelector('p').textContent.trim(); // Lấy tên danh mục
                applyFilters(); // Áp dụng bộ lọc với danh mục được chọn
            });
        });

        // Khởi tạo phân trang ban đầu với tất cả sản phẩm
        applyFilters();

        // Phần điều khiển cuộn (scrolling) cho các nút left và right
        const menuItemsContainer = document.getElementById('menuItems');
        const prevScrollBtn = document.querySelector('.prev');
        const nextScrollBtn = document.querySelector('.next');
        const skipAmount = 313;

        function updateScrollButtons() {
            const scrollLeft = menuItemsContainer.scrollLeft;
            const maxScrollLeft = menuItemsContainer.scrollWidth - menuItemsContainer.clientWidth;

            // Cập nhật hiển thị của nút dựa trên vị trí cuộn
            prevScrollBtn.style.visibility = scrollLeft === 0 ? 'hidden' : 'visible';
            nextScrollBtn.style.visibility = scrollLeft >= maxScrollLeft ? 'hidden' : 'visible';
        }

        prevScrollBtn.addEventListener('click', function () {
            menuItemsContainer.scrollBy({ left: -skipAmount, behavior: 'smooth' });
        });

        nextScrollBtn.addEventListener('click', function () {
            menuItemsContainer.scrollBy({ left: skipAmount, behavior: 'smooth' });
        });

        menuItemsContainer.addEventListener('scroll', updateScrollButtons);
        updateScrollButtons();

        const allCheckbox = document.getElementById('price-all');
        const priceCheckboxes = document.querySelectorAll('.price-checkbox');

        // Khi check vào checkbox "All"
        allCheckbox.addEventListener('change', function () {
            priceCheckboxes.forEach(function (checkbox) {
                checkbox.checked = allCheckbox.checked;
            });
        });

        // Khi check/uncheck bất kỳ checkbox con nào
        priceCheckboxes.forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                const allChecked = Array.from(priceCheckboxes).every(function (checkbox) {
                    return checkbox.checked;
                });
                allCheckbox.checked = allChecked;
            });
        });
    });

</script>
