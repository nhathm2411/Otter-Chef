// <auto-generated />
using System;
using Mango_Services.AuthAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mango.Services.AuthAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241026065605_Initial DB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mango.Services.AuthAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "123 Admin St",
                            Birthday = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9e735aa0-0133-4c00-87a2-f19f538aaa9e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            Gender = true,
                            IsActive = true,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELOhAnW/1n43Hl6ZFk6cpDg5BS2NADayHczW3FqUhoYazvatULxjMYgQPyepwzLzPg==",
                            PhoneNumber = "0784419070",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de0f32bf-0e11-4b09-bf18-d0cf6124edf6",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "456 Customer St",
                            Birthday = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ca158788-8432-4ac7-b664-5059523c69d6",
                            Email = "nhutvmce171686@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Vo",
                            Gender = true,
                            IsActive = true,
                            LastName = "Minh Nhut",
                            LockoutEnabled = false,
                            NormalizedEmail = "NHUTVMCE171686@FPT.EDU.VN",
                            NormalizedUserName = "NHUTVMCE171686@FPT.EDU.VN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVh9WrbEZukKdNhBuwGCgIQsIrB5et1a3ngL/K0EiYEPtk0cYda8cxkm58U9kfQCw==",
                            PhoneNumber = "0784419070",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ea0455c-9722-4340-9b4a-35429e231959",
                            TwoFactorEnabled = false,
                            UserName = "nhutvmce171686@fpt.edu.vn"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Address = "789 Customer St",
                            Birthday = new DateTime(1996, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "678dd9d3-1ebc-43e6-9291-6942484caa67",
                            Email = "khoaddce170883@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Do",
                            Gender = true,
                            IsActive = true,
                            LastName = "Dang Khoa",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHOADDCE170883@FPT.EDU.VN",
                            NormalizedUserName = "KHOADDCE170883@FPT.EDU.VN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnIeGlGn9VHkLqZjGT0d70L8YXQP5lvq47vO8XB0m0XkwMtcGFRK2Qm44yanX+TOg==",
                            PhoneNumber = "0784419070",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76eb13fc-8cd1-4363-94c2-c1893e86ef68",
                            TwoFactorEnabled = false,
                            UserName = "khoaddce170883@fpt.edu.vn"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Address = "1010 Customer St",
                            Birthday = new DateTime(1997, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "174afb2a-288d-48e6-8131-917c1c61ae24",
                            Email = "nhathmce170171@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Ho",
                            Gender = true,
                            IsActive = true,
                            LastName = "Minh Nhat",
                            LockoutEnabled = false,
                            NormalizedEmail = "NHATHMCE170171@FPT.EDU.VN",
                            NormalizedUserName = "NHATHMCE170171@FPT.EDU.VN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJyVE9byz/Z2m4SSzzJxUCAkITSSsxmXv5Py+RB0q53w1fvnU9O8BNya7H93oOMtDA==",
                            PhoneNumber = "0784419070",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a885fd9-69c8-49d3-aa69-3d4a490bae49",
                            TwoFactorEnabled = false,
                            UserName = "nhathmce170171@fpt.edu.vn"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Address = "1112 Customer St",
                            Birthday = new DateTime(1998, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "11df937b-b074-44a3-8a4f-16e0d56406ff",
                            Email = "nhunhce170053@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Nguyen",
                            Gender = false,
                            IsActive = true,
                            LastName = "Huynh Nhu",
                            LockoutEnabled = false,
                            NormalizedEmail = "NHUNHCE170053@FPT.EDU.VN",
                            NormalizedUserName = "NHUNHCE170053@FPT.EDU.VN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+RVP3TUcqSqIDg/vqEQGPUGW7lEpuCBrAsynH7ZS4aHar0qW/SZPQC4rWQzvGqTA==",
                            PhoneNumber = "0784419070",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22677e70-b80c-4315-ad67-7764d89a54fb",
                            TwoFactorEnabled = false,
                            UserName = "nhunhce170053@fpt.edu.vn"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Address = "1314 Customer St",
                            Birthday = new DateTime(1999, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a4a45ca7-9e6d-4321-896b-8f40faebb864",
                            Email = "thanhntce170901@fpt.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Nguyen Tran",
                            Gender = true,
                            IsActive = true,
                            LastName = "Trung Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHNTCE170901@FPT.EDU.VN",
                            NormalizedUserName = "THANHNTCE170901@FPT.EDU.VN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC2MUcWTK81ccF53x/StlgBMJTMmtk36lRuJkFlCEkZpJMa9mqVxwJSDcdvNxOMlEA==",
                            PhoneNumber = "0784419070",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7444a91f-fde7-45cf-a1a8-0d71c3157169",
                            TwoFactorEnabled = false,
                            UserName = "thanhntce170901@fpt.edu.vn"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "101",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "102",
                            Name = "CUSTOMER",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "101"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "102"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "102"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "102"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "102"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "102"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mango.Services.AuthAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mango.Services.AuthAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mango.Services.AuthAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mango.Services.AuthAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
